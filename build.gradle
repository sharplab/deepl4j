buildscript {

    ext {
        // Gradle plugin versions
        openapiGeneratorVersion = "6.1.0"

        // Library versions
        findbugsJsr305Version = "3.0.2"
        swaggerAnnotationsVersion = "1.6.6"
        jacksonVersion = "2.13.4"
        jacksonDatabindNullableVersion = "0.2.3"
        jakartaAnnotationVersion = "2.1.1"
        httpclientVersion = "4.5.13"

        junitVersion = "5.9.0"
        assertjVersion = "3.23.1"
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}


plugins {
    id 'java'
    id 'maven-publish'
    id 'org.openapi.generator' version "$openapiGeneratorVersion"
}

group 'net.sharplab'
version "$deepl4jVersion"

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.swagger:swagger-annotations:$swaggerAnnotationsVersion"
    implementation "com.google.code.findbugs:jsr305:$findbugsJsr305Version"
    implementation "org.apache.httpcomponents:httpclient:$httpclientVersion"
    implementation "org.apache.httpcomponents:httpmime:$httpclientVersion"
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    implementation "org.openapitools:jackson-databind-nullable:$jacksonDatabindNullableVersion"
    implementation "jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationVersion"


    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'build/generated/sources/openapi/java/main'
        }
    }
}


compileJava {
    dependsOn.add("openApiGenerate")
}

test {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName = "java"
    inputSpec = "$rootDir/src/main/resources/specs/deepl-api-v2.yml".toString()
    outputDir = "$buildDir/intermediates/openapi".toString()
    apiPackage = "net.sharplab.deepl4j"
    invokerPackage = "net.sharplab.deepl4j.client"
    modelPackage = "net.sharplab.deepl4j.model"
    configOptions = [
            library: "apache-httpclient",
            dateLibrary: "java8",
            sourceFolder: "src/main/java"
    ]
}

tasks.withType(org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    doLast{
        delete(fileTree(dir: "$buildDir/generated/sources/openapi"))
        copy {
            from fileTree(dir: "$buildDir/intermediates/openapi/src/main/java")
            into "$buildDir/generated/sources/openapi/java/main".toString()
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

def githubUrl = "https://github.com/sharplab/deepl4j"

publishing {
    publications {
        standard(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project.name
//                    description = project.description //TODO: this doesn't work. to be fixed. https://github.com/gradle/gradle/issues/12259
                url = githubUrl
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'ynojima'
                        name = 'Yoshikazu Nojima'
                        email = 'mail@ynojima.net'
                    }
                }
                scm {
                    url = githubUrl
                }
            }
            pom.withXml { pom ->
                pom.asNode().appendNode("description", project.description) // workaround for https://github.com/gradle/gradle/issues/12259
            }
        }
    }
}
